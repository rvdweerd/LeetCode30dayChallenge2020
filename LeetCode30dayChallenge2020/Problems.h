#pragma once
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <queue>
#include "GraphClass.h"

namespace LC37 // Sudoko solver
{
	class Solution {
	private:
		struct Pos
		{
			size_t i;
			size_t row;
			size_t col;
			char ch;
		};
		std::unordered_map<size_t, std::set<char>> cache;
		void FillCache(std::vector<std::vector<char>>& board)
		{
			for (size_t i = 0; i < 81; i++)
			{
				size_t row = i / 9; size_t col = i % 9;
				if (board[row][col] == '.')
				{
					std::set<char> reducedSet = { '1','2','3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9' };
					// check row & col
					for (size_t i = 0; i < 9; i++)
					{
						const char ch_r = board[row][i];
						const char ch_c = board[i][col];
						if (ch_r != '.') reducedSet.erase(ch_r);
						if (ch_c != '.') reducedSet.erase(ch_c);
					}
					// check quadrant
					size_t Q_row = row / 3;
					size_t Q_col = col / 3;
					for (size_t i = 0; i < 3; i++)
					{
						for (size_t j = 0; j < 3; j++)
						{
							const char ch = board[Q_row * 3 + i][Q_col * 3 + j];
							if (ch != '.') reducedSet.erase(ch);
						}
					}
					cache[i] = reducedSet;
				}
			}
		}
		std::set<char> GetOptions(size_t row, size_t col, size_t i, std::vector<std::vector<char>>& board)
		{
			std::set<char> reducedSet = cache.find(i)->second;
			// check row & col
			for (size_t i = 0; i < 9; i++)
			{
				const char ch_r = board[row][i] ;
				const char ch_c = board[i][col] ;
				if (ch_r != '.') reducedSet.erase(ch_r);
				if (ch_c != '.') reducedSet.erase(ch_c);
			}
			// check quadrant
			size_t Q_row = row / 3;
			size_t Q_col = col / 3;
			for (size_t i = 0; i < 3; i++)
			{
				for (size_t j = 0; j < 3; j++)
				{
					const char ch = board[Q_row * 3 + i][Q_col * 3 + j];
					if (ch != '.') reducedSet.erase(ch);
				}
			}
			return reducedSet;
		}
	public:
		void solveSudoku(std::vector<std::vector<char>>& board) 
		{
			std::stack<Pos> stack;
			FillCache(board);
			size_t i = 0;
			while (i < 81)
			{
				size_t row = i / 9;
				size_t col = i % 9;
				if (board[row][col] == '.')
				{
					std::set<char> options = GetOptions(row, col, i,board);
					if (options.size() == 0)
					{
						Pos prevPos = stack.top(); stack.pop();
						while (prevPos.ch == '.')
						{
							board[prevPos.row][prevPos.col] = '.'; // backtrack
							prevPos = stack.top(); stack.pop();
						}
						board[prevPos.row][prevPos.col] = prevPos.ch;
						i = prevPos.i+1;
					}
					else
					{
						stack.push({ i, row, col, '.' });
						for (auto c : options)
						{
							stack.push({ i, row, col, c });
						}
						Pos prevPos = stack.top(); stack.pop();
						board[prevPos.row][prevPos.col] = prevPos.ch;
						i++;
					}
				}
				else
				{
					++i;
				}
			}
		}
	};
	void RunExample()
	{
		std::vector<std::vector<char>> board =
		{
			{'5','3','.',	'.','7','.',	'.','.','.'},
			{'6','.','.',	'1','9','5',	'.','.','.'},
			{'.','9','8',	'.','.','.',	'.','6','.'},

			{'8','.','.',	'.','6','.',	'.','.','3'},
			{'4','.','.',	'8','.','3',	'.','.','1'},
			{'7','.','.',	'.','2','.',	'.','.','6'},

			{'.','6','.',	'.','.','.',	'2','8','.'},
			{'.','.','.',	'4','1','9',	'.','.','5'},
			{'.','.','.',	'.','8','.',	'.','7','9'}
		};
		Solution().solveSudoku(board);
	}
}
namespace LC587 // Erect the Fence
{
	struct Vec2
	{
		Vec2(std::vector<int> v1, std::vector<int> v2)
			:
			x(v2[0]-v1[0]),
			y(v2[1]-v1[1])
		{}
		Vec2(std::vector<int> v)
			:
			x(v[0]),
			y(v[1])
		{}
		Vec2(int a, int b)
			:
			x(a),
			y(b)
		{}
		void Print()
		{
			std::cout << "[" << x << "," << y << "], ";
		}
		int operator%(Vec2& v2)
		{
			return (x * v2.y - y * v2.x);
		}
		Vec2 operator-(Vec2& rhs)
		{
			return Vec2(x-rhs.x,y-rhs.y);
		}
		int x;
		int y;
	};
	class Solution {
	private:
		void SweepUpper(std::vector<std::vector<int>>& points, std::stack<std::vector<int>>& stack)
		{
			stack.push(points[0]);
			stack.push(points[1]);
			Vec2 p0(points[0]);
			Vec2 p1(points[1]);

			for (size_t i = 2; i<points.size();i++)
			{
				Vec2 p2 = points[i];
				Vec2 v1 = p1 - p0;
				Vec2 v2 = p2 - p0;

				while (v1 % v2 > 0)
				{
					stack.pop(); stack.pop();
					p1 = p0; 
					if (stack.empty())
					{
						stack.push({ p0.x,p0.y });
						break;
					}
					p0 = stack.top();
					stack.push({p1.x,p1.y});
					v1 = p1 - p0;
					v2 = p2 - p0;
				}
				stack.push(points[i]);
				p0 = p1;
				p1 = points[i];
			}
		}
		void SweepLower(std::vector<std::vector<int>>& points, std::stack<std::vector<int>>& stack)
		{
			stack.push(points[points.size()-1]);
			stack.push(points[points.size()-2]);
			Vec2 p0(points[points.size() - 1]);
			Vec2 p1(points[points.size() - 2]);

			for (int i = points.size()-3; i >= 0; i--)
			{
				Vec2 p2 = points[i];
				Vec2 v1 = p1 - p0;
				Vec2 v2 = p2 - p0;

				while (v1 % v2 > 0)
				{
					stack.pop(); stack.pop();
					p1 = p0;
					if (stack.empty())
					{
						stack.push({ p0.x,p0.y });
						break;
					}
					p0 = stack.top();
					stack.push({ p1.x,p1.y });
					v1 = p1 - p0;
					v2 = p2 - p0;
				}
				stack.push(points[i]);
				p0 = p1;
				p1 = points[i];
			}
		}
	public:
		std::vector<std::vector<int>> outerTrees(std::vector<std::vector<int>>& points) 
		{
			if (points.size() <= 3) return points;
			std::sort(points.begin(), points.end(), [](std::vector<int> v1, std::vector<int> v2) {return (v1 < v2); });
			std::stack<std::vector<int>> stack;
			SweepUpper(points,stack);
			SweepLower(points, stack);

			std::set<std::vector<int>> set;
			while (!stack.empty())
			{
				set.insert(stack.top());
				stack.pop();
			}
			std::vector<std::vector<int>> result(set.begin(), set.end());
			return result;
		}
	};

	void RunExample()
	{
		
		
		//std::vector<std::vector<int>> vec = { {0,0}, {1,1}, {2,2}, {2,1}, {3,10}, {4,0} ,{3,0} };
		//std::vector<std::vector<int>> vec = { {0,0}, {1,0}, {1,1}, {2,0}, {2,1}, {2,2}, {3,0} };
		//std::vector<std::vector<int>> vec = { {1, 1}, {2, 2}, {2, 0}, {2, 4}, {3, 3}, {4, 2} };
		//std::vector<std::vector<int>> vec = { {0, 2}, {1, 1}, {2, 2}, {2, 4}, {4, 2}, {3, 3} };
		//std::vector<std::vector<int>> vec = { {2,2}, {3,2}, {10,2} };
		std::vector<std::vector<int>> vec = { {0, 1}, {0, 2}, {0, 5}, {0, 7}, {0, 10}, {0, 11}, {0, 14}, {0, 18}, {0, 19}, {0, 22}, {0, 25}, {0, 26}, {0, 29}, {0, 30}, {0, 31}, {0, 32}, {0, 33}, {0, 35}, {0, 39}, {0, 40}, {0, 49}, {0, 50}, {0, 67}, {0, 71}, {0, 76}, {0, 82}, {0, 83}, {1, 1}, {1, 7}, {1, 16}, {1, 31}, {1, 36}, {1, 38}, {1, 39}, {1, 40}, {1, 46}, {1, 47}, {1, 60}, {1, 61}, {1, 66}, {1, 71}, {1, 73}, {1, 74}, {1, 76}, {1, 86}, {1, 87}, {1, 91}, {1, 93}, {1, 97}, {1, 98}, {2, 8}, {2, 9}, {2, 13}, {2, 24}, {2, 25}, {2, 27}, {2, 29}, {2, 35}, {2, 38}, {2, 39}, {2, 42}, {2, 58}, {2, 61}, {2, 66}, {2, 78}, {2, 80}, {2, 81}, {2, 87}, {2, 88}, {2, 93}, {3, 25}, {3, 27}, {3, 45}, {3, 47}, {3, 55}, {3, 59}, {3, 66}, {3, 73}, {3, 78}, {3, 79}, {3, 87}, {3, 89}, {3, 92}, {3, 94}, {4, 5}, {4, 6}, {4, 17}, {4, 18}, {4, 19}, {4, 23}, {4, 37}, {4, 38}, {4, 44}, {4, 53}, {4, 67}, {4, 68}, {4, 73}, {4, 78}, {4, 99}, {5, 3}, {5, 4}, {5, 6}, {5, 15}, {5, 17}, {5, 18}, {5, 28}, {5, 30}, {5, 31}, {5, 32}, {5, 34}, {5, 41}, {5, 48}, {5, 55}, {5, 57}, {5, 59}, {5, 68}, {5, 81}, {5, 85}, {5, 88}, {5, 89}, {5, 93}, {6, 9}, {6, 12}, {6, 14}, {6, 30}, {6, 32}, {6, 44}, {6, 62}, {6, 63}, {6, 66}, {6, 67}, {6, 69}, {6, 75}, {6, 76}, {6, 85}, {7, 5}, {7, 10}, {7, 13}, {7, 17}, {7, 24}, {7, 26}, {7, 28}, {7, 29}, {7, 31}, {7, 35}, {7, 38}, {7, 39}, {7, 40}, {7, 43}, {7, 44}, {7, 49}, {7, 68}, {7, 71}, {7, 81}, {7, 82}, {7, 83}, {7, 87}, {7, 94}, {8, 1}, {8, 6}, {8, 12}, {8, 16}, {8, 25}, {8, 27}, {8, 44}, {8, 45}, {8, 52}, {8, 66}, {8, 67}, {8, 69}, {8, 71}, {8, 73}, {8, 84}, {8, 85}, {8, 89}, {8, 91}, {8, 96}, {8, 99}, {9, 4}, {9, 11}, {9, 18}, {9, 27}, {9, 28}, {9, 32}, {9, 40}, {9, 41}, {9, 57}, {9, 64}, {9, 68}, {9, 79}, {9, 80}, {9, 85}, {9, 87}, {9, 95}, {9, 97}, {9, 98}, {10, 2}, {10, 6}, {10, 15}, {10, 20}, {10, 22}, {10, 26}, {10, 43}, {10, 50}, {10, 51}, {10, 69}, {10, 71}, {10, 73}, {10, 79}, {10, 81}, {10, 82}, {10, 87}, {10, 93}, {10, 95}, {11, 1}, {11, 11}, {11, 23}, {11, 24}, {11, 29}, {11, 37}, {11, 43}, {11, 45}, {11, 51}, {11, 53}, {11, 60}, {11, 62}, {11, 64}, {11, 67}, {11, 74}, {11, 77}, {11, 84}, {11, 93}, {12, 1}, {12, 2}, {12, 12}, {12, 13}, {12, 14}, {12, 27}, {12, 28}, {12, 39}, {12, 46}, {12, 48}, {12, 49}, {12, 50}, {12, 52}, {12, 63}, {12, 85}, {12, 87}, {12, 99}, {13, 2}, {13, 4}, {13, 8}, {13, 9}, {13, 11}, {13, 13}, {13, 14}, {13, 20}, {13, 38}, {13, 47}, {13, 48}, {13, 56}, {13, 61}, {13, 67}, {13, 75}, {13, 78}, {13, 80}, {13, 88}, {13, 89}, {13, 93}, {14, 12}, {14, 15}, {14, 20}, {14, 23}, {14, 24}, {14, 36}, {14, 53}, {14, 54}, {14, 58}, {14, 65}, {14, 66}, {14, 75}, {14, 87}, {14, 88}, {14, 93}, {14, 96}, {14, 98}, {15, 0}, {15, 1}, {15, 6}, {15, 10}, {15, 18}, {15, 29}, {15, 44}, {15, 45}, {15, 48}, {15, 52}, {15, 63}, {15, 75}, {15, 87}, {15, 90}, {15, 92}, {15, 93}, {15, 94}, {16, 7}, {16, 8}, {16, 11}, {16, 12}, {16, 13}, {16, 16}, {16, 30}, {16, 35}, {16, 38}, {16, 39}, {16, 42}, {16, 51}, {16, 66}, {16, 71}, {16, 72}, {16, 74}, {16, 81}, {16, 82}, {16, 85}, {16, 90}, {16, 91}, {16, 93}, {16, 99}, {17, 4}, {17, 8}, {17, 10}, {17, 11}, {17, 25}, {17, 28}, {17, 36}, {17, 37}, {17, 42}, {17, 54}, {17, 56}, {17, 58}, {17, 64}, {17, 71}, {17, 81}, {17, 82}, {17, 85}, {17, 93}, {17, 95}, {17, 98}, {18, 4}, {18, 7}, {18, 11}, {18, 17}, {18, 23}, {18, 38}, {18, 39}, {18, 41}, {18, 47}, {18, 53}, {18, 64}, {18, 65}, {18, 70}, {18, 71}, {18, 72}, {18, 73}, {18, 77}, {18, 83}, {18, 94}, {19, 8}, {19, 11}, {19, 20}, {19, 30}, {19, 31}, {19, 33}, {19, 34}, {19, 43}, {19, 56}, {19, 63}, {19, 68}, {19, 69}, {19, 71}, {19, 72}, {19, 77}, {19, 85}, {19, 87}, {19, 96}, {20, 1}, {20, 3}, {20, 7}, {20, 21}, {20, 27}, {20, 28}, {20, 30}, {20, 40}, {20, 41}, {20, 49}, {20, 52}, {20, 54}, {20, 67}, {20, 68}, {20, 76}, {20, 78}, {20, 82}, {20, 84}, {20, 91}, {20, 92}, {20, 97}, {21, 1}, {21, 7}, {21, 14}, {21, 15}, {21, 17}, {21, 21}, {21, 22}, {21, 29}, {21, 32}, {21, 44}, {21, 50}, {21, 53}, {21, 61}, {21, 66}, {21, 73}, {21, 78}, {21, 86}, {21, 91}, {21, 94}, {21, 98}, {22, 0}, {22, 1}, {22, 3}, {22, 6}, {22, 21}, {22, 24}, {22, 31}, {22, 34}, {22, 36}, {22, 41}, {22, 44}, {22, 48}, {22, 54}, {22, 62}, {22, 68}, {22, 69}, {22, 72}, {22, 81}, {22, 95}, {23, 15}, {23, 20}, {23, 22}, {23, 24}, {23, 28}, {23, 30}, {23, 45}, {23, 46}, {23, 51}, {23, 55}, {23, 57}, {23, 59}, {23, 62}, {23, 66}, {23, 68}, {23, 70}, {23, 72}, {23, 74}, {23, 75}, {23, 76}, {23, 87}, {23, 91}, {23, 92}, {23, 95}, {23, 98}, {24, 1}, {24, 2}, {24, 5}, {24, 6}, {24, 9}, {24, 12}, {24, 20}, {24, 21}, {24, 24}, {24, 27}, {24, 32}, {24, 37}, {24, 45}, {24, 50}, {24, 52}, {24, 57}, {24, 59}, {24, 60}, {24, 77}, {24, 83}, {24, 84}, {24, 86}, {24, 91}, {24, 95}, {25, 2}, {25, 4}, {25, 6}, {25, 13}, {25, 18}, {25, 19}, {25, 24}, {25, 32}, {25, 41}, {25, 53}, {25, 60}, {25, 63}, {25, 71}, {25, 76}, {25, 79}, {25, 84}, {25, 95}, {26, 1}, {26, 5}, {26, 6}, {26, 8}, {26, 14}, {26, 19}, {26, 20}, {26, 26}, {26, 34}, {26, 43}, {26, 44}, {26, 59}, {26, 60}, {26, 61}, {26, 63}, {26, 64}, {26, 73}, {26, 76}, {26, 79}, {26, 82}, {26, 86}, {27, 0}, {27, 3}, {27, 7}, {27, 13}, {27, 16}, {27, 23}, {27, 30}, {27, 46}, {27, 48}, {27, 52}, {27, 54}, {27, 55}, {27, 72}, {27, 74}, {27, 83}, {27, 84}, {27, 92}, {28, 7}, {28, 9}, {28, 16}, {28, 20}, {28, 25}, {28, 27}, {28, 34}, {28, 35}, {28, 44}, {28, 65}, {28, 76}, {28, 81}, {28, 87}, {28, 93}, {28, 94}, {28, 99}, {29, 12}, {29, 17}, {29, 20}, {29, 31}, {29, 35}, {29, 37}, {29, 41}, {29, 42}, {29, 50}, {29, 56}, {29, 57}, {29, 58}, {29, 61}, {29, 64}, {29, 71}, {29, 78}, {29, 89}, {29, 94}, {30, 1}, {30, 5}, {30, 10}, {30, 15}, {30, 22}, {30, 39}, {30, 40}, {30, 41}, {30, 46}, {30, 71}, {30, 81}, {30, 82}, {30, 89}, {30, 92}, {30, 96}, {30, 99}, {31, 4}, {31, 6}, {31, 8}, {31, 13}, {31, 14}, {31, 20}, {31, 21}, {31, 24}, {31, 33}, {31, 36}, {31, 46}, {31, 48}, {31, 49}, {31, 57}, {31, 59}, {31, 64}, {31, 77}, {31, 82}, {31, 88}, {31, 99}, {32, 8}, {32, 14}, {32, 15}, {32, 22}, {32, 24}, {32, 30}, {32, 34}, {32, 35}, {32, 39}, {32, 46}, {32, 50}, {32, 65}, {32, 67}, {32, 75}, {32, 76}, {32, 83}, {32, 87}, {32, 90}, {32, 91}, {32, 99}, {33, 0}, {33, 6}, {33, 8}, {33, 10}, {33, 17}, {33, 23}, {33, 25}, {33, 26}, {33, 32}, {33, 40}, {33, 57}, {33, 63}, {33, 69}, {33, 75}, {33, 79}, {33, 80}, {33, 82}, {33, 88}, {33, 90}, {33, 94}, {34, 7}, {34, 13}, {34, 19}, {34, 22}, {34, 28}, {34, 31}, {34, 44}, {34, 45}, {34, 46}, {34, 48}, {34, 55}, {34, 57}, {34, 58}, {34, 76}, {34, 80}, {34, 87}, {34, 89}, {34, 90}, {34, 93}, {34, 97}, {35, 0}, {35, 2}, {35, 5}, {35, 6}, {35, 7}, {35, 8}, {35, 20}, {35, 22}, {35, 26}, {35, 28}, {35, 33}, {35, 37}, {35, 42}, {35, 49}, {35, 52}, {35, 53}, {35, 56}, {35, 57}, {35, 58}, {35, 61}, {35, 66}, {35, 84}, {35, 95}, {35, 99}, {36, 0}, {36, 2}, {36, 5}, {36, 9}, {36, 14}, {36, 16}, {36, 17}, {36, 21}, {36, 26}, {36, 37}, {36, 40}, {36, 42}, {36, 48}, {36, 51}, {36, 54}, {36, 59}, {36, 64}, {36, 66}, {36, 73}, {36, 75}, {36, 82}, {36, 91}, {36, 96}, {37, 0}, {37, 2}, {37, 8}, {37, 9}, {37, 12}, {37, 16}, {37, 25}, {37, 31}, {37, 33}, {37, 38}, {37, 39}, {37, 42}, {37, 55}, {37, 64}, {37, 69}, {37, 73}, {37, 79}, {37, 83}, {37, 88}, {37, 91}, {38, 13}, {38, 29}, {38, 33}, {38, 35}, {38, 41}, {38, 43}, {38, 45}, {38, 47}, {38, 59}, {38, 63}, {38, 70}, {38, 73}, {38, 90}, {38, 96}, {39, 3}, {39, 9}, {39, 18}, {39, 27}, {39, 36}, {39, 41}, {39, 49}, {39, 63}, {39, 66}, {39, 69}, {39, 77}, {39, 93}, {39, 96}, {40, 3}, {40, 6}, {40, 11}, {40, 13}, {40, 16}, {40, 17}, {40, 18}, {40, 21}, {40, 22}, {40, 26}, {40, 34}, {40, 35}, {40, 42}, {40, 44}, {40, 48}, {40, 55}, {40, 60}, {40, 64}, {40, 69}, {40, 79}, {40, 84}, {40, 89}, {40, 92}, {40, 94}, {40, 96}, {41, 1}, {41, 4}, {41, 6}, {41, 8}, {41, 12}, {41, 15}, {41, 17}, {41, 18}, {41, 38}, {41, 43}, {41, 53}, {41, 65}, {41, 70}, {41, 72}, {41, 83}, {41, 91}, {41, 95}, {41, 97}, {41, 98}, {42, 0}, {42, 4}, {42, 5}, {42, 10}, {42, 12}, {42, 17}, {42, 29}, {42, 30}, {42, 41}, {42, 44}, {42, 47}, {42, 50}, {42, 53}, {42, 56}, {42, 59}, {42, 61}, {42, 62}, {42, 76}, {42, 79}, {42, 82}, {42, 86}, {42, 88}, {42, 89}, {42, 91}, {42, 93}, {43, 2}, {43, 3}, {43, 10}, {43, 12}, {43, 16}, {43, 17}, {43, 19}, {43, 22}, {43, 26}, {43, 27}, {43, 30}, {43, 32}, {43, 33}, {43, 34}, {43, 39}, {43, 47}, {43, 66}, {43, 80}, {43, 83}, {43, 85}, {43, 86}, {43, 95}, {43, 97}, {44, 0}, {44, 5}, {44, 8}, {44, 15}, {44, 16}, {44, 20}, {44, 31}, {44, 41}, {44, 46}, {44, 49}, {44, 54}, {44, 56}, {44, 58}, {44, 62}, {44, 64}, {44, 66}, {44, 68}, {44, 89}, {44, 97}, {45, 8}, {45, 11}, {45, 18}, {45, 25}, {45, 26}, {45, 27}, {45, 31}, {45, 32}, {45, 33}, {45, 40}, {45, 41}, {45, 50}, {45, 57}, {45, 61}, {45, 62}, {45, 68}, {45, 74}, {45, 81}, {45, 83}, {45, 91}, {46, 0}, {46, 4}, {46, 12}, {46, 15}, {46, 23}, {46, 25}, {46, 32}, {46, 39}, {46, 47}, {46, 50}, {46, 57}, {46, 58}, {46, 61}, {46, 80}, {46, 90}, {46, 99}, {47, 2}, {47, 6}, {47, 8}, {47, 23}, {47, 32}, {47, 33}, {47, 41}, {47, 47}, {47, 49}, {47, 56}, {47, 57}, {47, 59}, {47, 70}, {47, 77}, {47, 99}, {48, 7}, {48, 24}, {48, 25}, {48, 35}, {48, 48}, {48, 49}, {48, 51}, {48, 54}, {48, 60}, {48, 65}, {48, 72}, {48, 77}, {48, 79}, {48, 80}, {48, 81}, {48, 84}, {48, 93}, {48, 97}, {48, 98}, {48, 99}, {49, 3}, {49, 6}, {49, 7}, {49, 8}, {49, 10}, {49, 15}, {49, 20}, {49, 24}, {49, 35}, {49, 39}, {49, 44}, {49, 49}, {49, 60}, {49, 61}, {49, 64}, {49, 79}, {49, 87}, {49, 92}, {49, 95}, {49, 98}, {50, 1}, {50, 2}, {50, 5}, {50, 14}, {50, 19}, {50, 27}, {50, 28}, {50, 31}, {50, 33}, {50, 42}, {50, 47}, {50, 52}, {50, 63}, {50, 65}, {50, 66}, {50, 70}, {50, 72}, {50, 76}, {50, 77}, {50, 80}, {50, 85}, {50, 93}, {51, 0}, {51, 6}, {51, 10}, {51, 15}, {51, 19}, {51, 25}, {51, 26}, {51, 27}, {51, 29}, {51, 33}, {51, 37}, {51, 44}, {51, 56}, {51, 58}, {51, 60}, {51, 64}, {51, 67}, {51, 69}, {51, 77}, {51, 78}, {51, 81}, {51, 82}, {51, 86}, {51, 90}, {51, 94}, {51, 95}, {51, 96}, {51, 97}, {51, 98}, {52, 3}, {52, 16}, {52, 19}, {52, 21}, {52, 23}, {52, 26}, {52, 29}, {52, 30}, {52, 33}, {52, 37}, {52, 39}, {52, 49}, {52, 50}, {52, 53}, {52, 63}, {52, 67}, {52, 80}, {52, 82}, {52, 85}, {52, 86}, {52, 87}, {52, 90}, {53, 5}, {53, 9}, {53, 12}, {53, 23}, {53, 28}, {53, 31}, {53, 32}, {53, 36}, {53, 48}, {53, 55}, {53, 58}, {53, 63}, {53, 65}, {53, 70}, {53, 79}, {53, 83}, {53, 84}, {53, 87}, {54, 3}, {54, 14}, {54, 18}, {54, 19}, {54, 25}, {54, 29}, {54, 42}, {54, 65}, {54, 66}, {54, 67}, {54, 71}, {54, 74}, {54, 82}, {54, 93}, {54, 98}, {55, 1}, {55, 8}, {55, 11}, {55, 13}, {55, 18}, {55, 26}, {55, 28}, {55, 32}, {55, 35}, {55, 39}, {55, 43}, {55, 47}, {55, 59}, {55, 65}, {55, 69}, {55, 70}, {55, 72}, {55, 77}, {55, 80}, {55, 81}, {55, 90}, {55, 92}, {55, 93}, {55, 95}, {56, 0}, {56, 4}, {56, 14}, {56, 16}, {56, 22}, {56, 24}, {56, 29}, {56, 33}, {56, 35}, {56, 47}, {56, 56}, {56, 62}, {56, 66}, {56, 72}, {56, 81}, {56, 84}, {56, 89}, {56, 91}, {56, 93}, {56, 95}, {57, 9}, {57, 12}, {57, 14}, {57, 32}, {57, 38}, {57, 40}, {57, 41}, {57, 49}, {57, 53}, {57, 55}, {57, 60}, {57, 68}, {57, 74}, {57, 84}, {57, 90}, {58, 9}, {58, 16}, {58, 27}, {58, 31}, {58, 40}, {58, 52}, {58, 54}, {58, 68}, {58, 71}, {58, 77}, {58, 78}, {58, 81}, {58, 88}, {58, 89}, {58, 90}, {58, 95}, {58, 99}, {59, 1}, {59, 6}, {59, 13}, {59, 14}, {59, 27}, {59, 31}, {59, 32}, {59, 38}, {59, 58}, {59, 60}, {59, 63}, {59, 84}, {59, 89}, {59, 93}, {60, 3}, {60, 4}, {60, 17}, {60, 18}, {60, 19}, {60, 21}, {60, 29}, {60, 34}, {60, 35}, {60, 36}, {60, 41}, {60, 44}, {60, 51}, {60, 72}, {60, 74}, {60, 76}, {60, 82}, {60, 88}, {60, 91}, {60, 93}, {60, 97}, {60, 98}, {61, 2}, {61, 5}, {61, 6}, {61, 15}, {61, 22}, {61, 24}, {61, 27}, {61, 29}, {61, 37}, {61, 55}, {61, 61}, {61, 62}, {61, 63}, {61, 65}, {61, 66}, {61, 68}, {61, 72}, {61, 82}, {61, 84}, {61, 96}, {62, 2}, {62, 9}, {62, 12}, {62, 16}, {62, 19}, {62, 20}, {62, 21}, {62, 31}, {62, 32}, {62, 35}, {62, 44}, {62, 48}, {62, 52}, {62, 62}, {62, 63}, {62, 68}, {62, 77}, {62, 81}, {62, 84}, {62, 89}, {62, 95}, {63, 4}, {63, 11}, {63, 20}, {63, 26}, {63, 36}, {63, 42}, {63, 43}, {63, 51}, {63, 55}, {63, 57}, {63, 61}, {63, 62}, {63, 63}, {63, 71}, {63, 80}, {63, 88}, {63, 93}, {64, 9}, {64, 15}, {64, 16}, {64, 20}, {64, 22}, {64, 29}, {64, 32}, {64, 37}, {64, 46}, {64, 49}, {64, 54}, {64, 56}, {64, 60}, {64, 65}, {64, 78}, {64, 86}, {64, 89}, {64, 92}, {64, 96}, {64, 98}, {65, 10}, {65, 15}, {65, 18}, {65, 20}, {65, 21}, {65, 22}, {65, 23}, {65, 26}, {65, 27}, {65, 44}, {65, 47}, {65, 51}, {65, 78}, {65, 91}, {65, 94}, {66, 2}, {66, 9}, {66, 27}, {66, 32}, {66, 33}, {66, 56}, {66, 58}, {66, 59}, {66, 65}, {66, 67}, {66, 70}, {66, 73}, {66, 80}, {66, 81}, {66, 86}, {66, 88}, {66, 99}, {67, 3}, {67, 14}, {67, 18}, {67, 19}, {67, 27}, {67, 31}, {67, 32}, {67, 34}, {67, 55}, {67, 62}, {67, 65}, {67, 67}, {67, 68}, {67, 70}, {67, 71}, {67, 75}, {67, 93}, {67, 98}, {68, 0}, {68, 3}, {68, 6}, {68, 21}, {68, 22}, {68, 33}, {68, 35}, {68, 45}, {68, 56}, {68, 67}, {68, 68}, {68, 81}, {68, 84}, {68, 85}, {68, 88}, {68, 97}, {69, 2}, {69, 6}, {69, 7}, {69, 18}, {69, 24}, {69, 29}, {69, 33}, {69, 37}, {69, 40}, {69, 49}, {69, 51}, {69, 52}, {69, 53}, {69, 57}, {69, 61}, {69, 77}, {69, 80}, {69, 81}, {69, 90}, {69, 94}, {70, 3}, {70, 6}, {70, 10}, {70, 13}, {70, 20}, {70, 30}, {70, 31}, {70, 33}, {70, 35}, {70, 37}, {70, 38}, {70, 41}, {70, 44}, {70, 47}, {70, 48}, {70, 49}, {70, 56}, {70, 64}, {70, 65}, {70, 73}, {70, 84}, {70, 88}, {70, 89}, {70, 91}, {70, 93}, {70, 94}, {71, 12}, {71, 19}, {71, 22}, {71, 24}, {71, 27}, {71, 32}, {71, 37}, {71, 38}, {71, 52}, {71, 57}, {71, 69}, {71, 77}, {71, 85}, {71, 87}, {71, 89}, {72, 1}, {72, 10}, {72, 12}, {72, 13}, {72, 22}, {72, 23}, {72, 24}, {72, 25}, {72, 26}, {72, 29}, {72, 36}, {72, 40}, {72, 52}, {72, 53}, {72, 55}, {72, 69}, {72, 74}, {72, 79}, {72, 80}, {72, 82}, {72, 83}, {72, 86}, {72, 91}, {72, 98}, {72, 99}, {73, 1}, {73, 3}, {73, 4}, {73, 9}, {73, 10}, {73, 15}, {73, 17}, {73, 24}, {73, 26}, {73, 28}, {73, 33}, {73, 36}, {73, 45}, {73, 52}, {73, 62}, {73, 63}, {73, 64}, {73, 68}, {73, 70}, {73, 74}, {73, 75}, {73, 77}, {73, 81}, {73, 85}, {73, 91}, {74, 2}, {74, 3}, {74, 7}, {74, 10}, {74, 14}, {74, 19}, {74, 23}, {74, 30}, {74, 31}, {74, 35}, {74, 43}, {74, 51}, {74, 55}, {74, 63}, {74, 80}, {74, 82}, {74, 96}, {74, 97}, {75, 1}, {75, 6}, {75, 8}, {75, 9}, {75, 10}, {75, 12}, {75, 27}, {75, 28}, {75, 31}, {75, 37}, {75, 42}, {75, 52}, {75, 69}, {75, 71}, {75, 73}, {75, 86}, {75, 87}, {75, 89}, {75, 90}, {76, 13}, {76, 19}, {76, 22}, {76, 34}, {76, 42}, {76, 44}, {76, 47}, {76, 51}, {76, 54}, {76, 64}, {76, 67}, {76, 69}, {76, 70}, {76, 78}, {76, 84}, {76, 85}, {76, 92}, {76, 94}, {76, 99}, {77, 7}, {77, 11}, {77, 17}, {77, 19}, {77, 21}, {77, 25}, {77, 26}, {77, 28}, {77, 30}, {77, 32}, {77, 33}, {77, 35}, {77, 39}, {77, 49}, {77, 54}, {77, 58}, {77, 64}, {77, 65}, {77, 66}, {77, 67}, {77, 72}, {77, 73}, {77, 79}, {77, 80}, {77, 86}, {77, 91}, {77, 95}, {77, 98}, {78, 0}, {78, 1}, {78, 2}, {78, 3}, {78, 13}, {78, 14}, {78, 19}, {78, 20}, {78, 25}, {78, 28}, {78, 31}, {78, 37}, {78, 40}, {78, 41}, {78, 43}, {78, 50}, {78, 53}, {78, 55}, {78, 59}, {78, 77}, {78, 82}, {78, 89}, {78, 91}, {78, 99}, {79, 1}, {79, 4}, {79, 5}, {79, 9}, {79, 21}, {79, 22}, {79, 28}, {79, 31}, {79, 38}, {79, 47}, {79, 58}, {79, 60}, {79, 61}, {79, 66}, {79, 69}, {79, 74}, {79, 79}, {79, 83}, {79, 92}, {79, 93}, {80, 10}, {80, 15}, {80, 18}, {80, 21}, {80, 25}, {80, 30}, {80, 31}, {80, 36}, {80, 37}, {80, 38}, {80, 44}, {80, 47}, {80, 50}, {80, 51}, {80, 54}, {80, 56}, {80, 66}, {80, 67}, {80, 68}, {80, 69}, {80, 70}, {80, 75}, {80, 78}, {80, 84}, {80, 97}, {81, 0}, {81, 1}, {81, 4}, {81, 11}, {81, 19}, {81, 21}, {81, 23}, {81, 31}, {81, 32}, {81, 42}, {81, 47}, {81, 50}, {81, 54}, {81, 57}, {81, 75}, {81, 79}, {81, 83}, {82, 2}, {82, 5}, {82, 6}, {82, 9}, {82, 12}, {82, 17}, {82, 30}, {82, 32}, {82, 40}, {82, 48}, {82, 50}, {82, 52}, {82, 57}, {82, 60}, {82, 67}, {82, 71}, {82, 76}, {82, 79}, {82, 86}, {82, 88}, {82, 90}, {83, 4}, {83, 15}, {83, 23}, {83, 27}, {83, 28}, {83, 29}, {83, 31}, {83, 32}, {83, 33}, {83, 43}, {83, 49}, {83, 53}, {83, 56}, {83, 59}, {83, 60}, {83, 64}, {83, 67}, {83, 70}, {83, 85}, {83, 90}, {83, 96}, {84, 5}, {84, 6}, {84, 10}, {84, 12}, {84, 18}, {84, 23}, {84, 27}, {84, 31}, {84, 32}, {84, 33}, {84, 40}, {84, 45}, {84, 46}, {84, 50}, {84, 72}, {84, 74}, {84, 77}, {84, 82}, {84, 87}, {84, 89}, {84, 93}, {85, 7}, {85, 9}, {85, 12}, {85, 13}, {85, 15}, {85, 16}, {85, 17}, {85, 24}, {85, 25}, {85, 28}, {85, 29}, {85, 33}, {85, 46}, {85, 49}, {85, 54}, {85, 56}, {85, 62}, {85, 67}, {85, 70}, {85, 78}, {85, 85}, {85, 89}, {85, 94}, {86, 0}, {86, 16}, {86, 26}, {86, 29}, {86, 32}, {86, 36}, {86, 41}, {86, 56}, {86, 66}, {86, 79}, {86, 80}, {86, 82}, {86, 91}, {86, 93}, {86, 97}, {87, 2}, {87, 6}, {87, 9}, {87, 13}, {87, 18}, {87, 21}, {87, 33}, {87, 40}, {87, 51}, {87, 64}, {87, 67}, {87, 68}, {87, 89}, {87, 91}, {87, 92}, {87, 94}, {87, 95}, {88, 15}, {88, 16}, {88, 17}, {88, 18}, {88, 22}, {88, 27}, {88, 31}, {88, 34}, {88, 40}, {88, 42}, {88, 48}, {88, 49}, {88, 56}, {88, 62}, {88, 65}, {88, 68}, {88, 69}, {88, 70}, {88, 74}, {88, 75}, {88, 77}, {88, 78}, {88, 96}, {89, 5}, {89, 10}, {89, 12}, {89, 52}, {89, 61}, {89, 62}, {89, 64}, {89, 66}, {89, 69}, {89, 74}, {89, 79}, {89, 82}, {89, 85}, {89, 88}, {90, 0}, {90, 8}, {90, 11}, {90, 17}, {90, 19}, {90, 33}, {90, 34}, {90, 41}, {90, 52}, {90, 55}, {90, 62}, {90, 77}, {90, 80}, {90, 83}, {90, 86}, {91, 2}, {91, 5}, {91, 11}, {91, 12}, {91, 28}, {91, 30}, {91, 33}, {91, 39}, {91, 40}, {91, 41}, {91, 42}, {91, 47}, {91, 48}, {91, 50}, {91, 53}, {91, 54}, {91, 55}, {91, 58}, {91, 60}, {91, 68}, {91, 69}, {91, 73}, {91, 74}, {91, 75}, {91, 77}, {91, 89}, {91, 90}, {91, 91}, {91, 92}, {91, 98}, {91, 99}, {92, 4}, {92, 6}, {92, 9}, {92, 12}, {92, 19}, {92, 30}, {92, 35}, {92, 58}, {92, 60}, {92, 64}, {92, 66}, {92, 69}, {92, 78}, {92, 84}, {92, 90}, {93, 6}, {93, 12}, {93, 18}, {93, 23}, {93, 29}, {93, 30}, {93, 41}, {93, 42}, {93, 58}, {93, 60}, {93, 64}, {93, 66}, {93, 67}, {93, 68}, {93, 75}, {93, 76}, {93, 77}, {93, 78}, {93, 80}, {93, 88}, {94, 1}, {94, 2}, {94, 21}, {94, 23}, {94, 29}, {94, 31}, {94, 38}, {94, 39}, {94, 48}, {94, 54}, {94, 61}, {94, 62}, {94, 68}, {94, 73}, {94, 75}, {94, 80}, {94, 84}, {94, 86}, {94, 89}, {94, 91}, {94, 92}, {95, 0}, {95, 12}, {95, 17}, {95, 23}, {95, 25}, {95, 27}, {95, 28}, {95, 31}, {95, 39}, {95, 41}, {95, 42}, {95, 48}, {95, 55}, {95, 63}, {95, 65}, {95, 66}, {95, 74}, {95, 91}, {95, 92}, {95, 94}, {95, 96}, {96, 4}, {96, 8}, {96, 13}, {96, 14}, {96, 23}, {96, 29}, {96, 35}, {96, 38}, {96, 39}, {96, 43}, {96, 62}, {96, 68}, {96, 77}, {96, 79}, {96, 81}, {96, 87}, {96, 93}, {96, 95}, {97, 5}, {97, 6}, {97, 11}, {97, 14}, {97, 17}, {97, 21}, {97, 22}, {97, 24}, {97, 28}, {97, 34}, {97, 38}, {97, 49}, {97, 59}, {97, 62}, {97, 79}, {98, 0}, {98, 7}, {98, 12}, {98, 16}, {98, 18}, {98, 21}, {98, 23}, {98, 25}, {98, 33}, {98, 35}, {98, 49}, {98, 50}, {98, 55}, {98, 58}, {98, 60}, {98, 61}, {98, 64}, {98, 75}, {98, 76}, {98, 77}, {98, 80}, {98, 86}, {98, 90}, {99, 0}, {99, 7}, {99, 12}, {99, 13}, {99, 19}, {99, 27}, {99, 29}, {99, 38}, {99, 45}, {99, 46}, {99, 56}, {99, 60}, {99, 62}, {99, 66}, {99, 69}, {99, 71}, {99, 72}, {99, 76}, {99, 77}, {99, 83}, {99, 94} };
		// PRINT

		std::cout << "Input:  "; for (auto p : vec) Vec2(p).Print(); std::cout << std::endl;
		// ENDPRINT

		auto ans = Solution().outerTrees(vec);
		
		// PRINT
		std::cout << "Output: "; for (auto p : ans) Vec2(p).Print(); std::cout << std::endl;
		// ENDPRINT
	}
}
namespace LC685 // Redundant connections
{
	class Solution {
	public:
		std::vector<int> findRedundantDirectedConnection(std::vector<std::vector<int>>& edges)
		{
			// Build graph
			Graph<int> graph(edges);
			std::set<std::vector<int>> removableEdges;

			// Case A: Is there a circuit? 
			//std::set<Graph<int>::Node*> circularNodes;
			//for (auto p : graph.nodemap) // p = pairs of { node_name , Node*}
			//{
			//	if (graph.IsCircularNode(p.second))
			//	{
			//		circularNodes.insert(p.second);
			//	}
			//}
			std::set<Graph<int>::Node*> circularNodes = graph.GetCircularNodes();
			for (auto n : circularNodes)
			{
				for (auto e : n->edges_out)
				{
					if (circularNodes.find(e->end) != circularNodes.end()) // if ourward edge points to another cirulcar node
					{
						if (e->end->InDegree() > 1 || !graph.HasRoot())
						{
							removableEdges.insert({ e->start->name,e->end->name });
						}
					}
				}
			}
			// Case B: No circuit, but is there a node with InDegree > 1? THEN: any incoming edges of this node can be removed
			if (removableEdges.size() == 0) // Move to Case B
			{
				for (auto p : graph.nodemap) // p = pairs of { node_name , Node*}
				{
					if (p.second->InDegree() > 1)
					{
						for (auto e : p.second->edges_in) // e = all incoming edges
						{
							removableEdges.insert({ e->start->name,e->end->name });
						}
					}
				}
			}
			// Result processing
			if (removableEdges.size() == 0) return {};
			else if (removableEdges.size() == 1) return  *removableEdges.begin();
			else // find last occurence of a removable edge in the input 2D array of edges (our function parameter)
			{
				for (size_t i = edges.size() - 1; i >= 0; --i)
				{
					if (removableEdges.find(edges[i]) != removableEdges.end())
					{
						return edges[i];
					}
				}

			}
			return {};
		}
		std::vector<int> findRedundantDirectedConnection_expensive(std::vector<std::vector<int>>& edges) 
		{
			// Build graph
			Graph<int> graph(edges);
			std::set<std::vector<int>> removableEdges;

			// Case A: Is there a circuit? 
			std::set<Graph<int>::Node*> circularNodes;
			for (auto p : graph.nodemap) // p = pairs of { node_name , Node*}
			{
				if (graph.IsCircularNode(p.second))
				{
					circularNodes.insert(p.second);
				}
			}
			for (auto n : circularNodes)
			{
				for (auto e : n->edges_out) 
				{
					if (circularNodes.find(e->end) != circularNodes.end()) // if ourward edge points to another cirulcar node
					{
						if (e->end->InDegree() > 1 || !graph.HasRoot() )
						{
							removableEdges.insert({ e->start->name,e->end->name });
						}
					}
				}
			}
			// Case B: No circuit, but is there a node with InDegree > 1? THEN: any incoming edges of this node can be removed
			if (removableEdges.size() == 0) // Move to Case B
			{
				for (auto p : graph.nodemap) // p = pairs of { node_name , Node*}
				{
					if (p.second->InDegree() > 1)
					{
						for (auto e : p.second->edges_in) // e = all incoming edges
						{
							removableEdges.insert({ e->start->name,e->end->name });
						}
					}
				}
			}
			// Result processing
			if (removableEdges.size() == 0) return {};
			else if (removableEdges.size() == 1) return  *removableEdges.begin();
			else // find last occurence of a removable edge in the input 2D array of edges (our function parameter)
			{
				for (size_t i = edges.size() - 1; i >= 0; --i)
				{
					if (removableEdges.find(edges[i]) != removableEdges.end())
					{
						return edges[i];
					}
				}

			}
			return {};
		}
	};

	void RunExample()
	{
		std::vector<std::vector<int>> edges1 = { {1,2},{1,3},{2,3} }; // ans: [2,3]
		auto ans1 = Solution().findRedundantDirectedConnection(edges1);
		std::vector<std::vector<int>> edges2 = { {1,2},{2,3},{3,4},{4,1},{1,5} }; // ans: [4,1]
		auto ans2 = Solution().findRedundantDirectedConnection(edges2);
		std::vector<std::vector<int>> edges3 = { {2,1},{3,1},{4,2},{1,4} }; //  ans: [2,1]
		auto ans3 = Solution().findRedundantDirectedConnection(edges3);
		std::vector<std::vector<int>> edges4 = { {5,2},{2,3},{3,4},{4,5},{5,1} }; //  ans: [4,5]
		auto ans4 = Solution().findRedundantDirectedConnection(edges4);
		Graph<std::string> graph(
			{
				{"B","C"},{"A","B"},{"C","A"},{"B","D"} ,
				{"D","E"},{"E","F"},{"F","D"},{"G","F"},
				{"G","H"},{"H","I"},{"I","J"},{"J","G"},
				{"J","K"},
			}
		);
		auto vec = graph.StronglyConnectedComponents();

	}
}